angular.module("mindTree",["ngCookies","treeCtrl","treeSrvs","cfp.hotkeys"]),angular.module("treeCtrl",[]).constant("_",window._).run(function($rootScope){$rootScope._=window._}).controller("treeController",["$scope","hotkeys","treeServices","$compile","$timeout",function($scope,hotkeys,treeServices,$compile,$timeout){angular.element(".init > form > input").focus(),$scope.node={depth:0,current:["nodeTop"],tempValue:null,lastTask:null,classTarget:"nodeTop"},$scope.$watch(function(){$scope.node.initialized=treeServices.config(),$scope.node.classTarget=_.join($scope.node.current,""),$scope.node.depth=$scope.node.current[$scope.node.current.length-1]}),$scope.init=function(){$scope.chart&&$scope.chart.destroy(),$scope.chart_config=treeServices.tree(),$scope.chart=new Treant($scope.chart_config,function(){for(var target=angular.element(".nodeBranches"),i=0;i<target.length;i++)target.eq(i).attr("ng-class","changeClass('"+target.eq(i).attr("id")+"')");$compile(target)($scope)})},$scope.setTopic=function(){treeServices.init(this.topic),$scope.init()},$scope.changeClass=function(newValue){return $scope.node.classTarget==newValue?"active":""},$scope.editNode=function(){treeServices.edit($scope.node.current,this.edited),$scope.init(),this.edited=""},$scope.newNode=function(){treeServices.set($scope.node.current,this.inserted),$scope.init(),this.inserted=""},hotkeys.add({combo:"down",description:"Move down",callback:function(){$scope.node.depth=0;var nextCheck=_.take($scope.node.current,$scope.node.current.length);"nodeTop"==$scope.node.current[0]?nextCheck.splice(0,1,"children",$scope.node.depth):nextCheck.push("children",$scope.node.depth),_.has($scope.chart_config.nodeStructure,nextCheck)&&($scope.node.current=nextCheck)}}),hotkeys.add({combo:"up",description:"Move up",callback:function(){$scope.node.current.length>2?$scope.node.current.splice($scope.node.current.length-2,2):($scope.node.current=["nodeTop"],$scope.node.next=["children",0])}}),hotkeys.add({combo:"right",description:"Move right",callback:function(){var nextCheck=_.take($scope.node.current,$scope.node.current.length);$scope.node.current.length>=2&&($scope.node.depth++,nextCheck.splice(nextCheck.length-1,1,$scope.node.depth),_.has($scope.chart_config.nodeStructure,nextCheck)&&($scope.node.current=nextCheck))}}),hotkeys.add({combo:"left",description:"Move left",callback:function(){$scope.node.depth>0&&$scope.node.current.length>=2&&($scope.node.depth--,$scope.node.current.splice($scope.node.current.length-1,1,$scope.node.depth))}}),hotkeys.add({combo:"del",description:"Delete the current item",callback:function(){treeServices["delete"](_.take($scope.node.current,$scope.node.current.length-1),$scope.node.current[$scope.node.current.length-1]),$scope.node.current=["nodeTop"],$scope.node.next=["children",0],$scope.init()}}),hotkeys.add({combo:"e",description:"Edit the current item",callback:function(){$scope.node.lastTask="edit";var editField=angular.element(".active");$scope.node.tempValue=editField.children().text(),editField.empty();var newField="<form ng-submit='editNode()'><input class='editNode' type='text' ng-model='edited'></form>";editField.append(newField),$timeout(function(){angular.element(".editNode").focus()},1),$compile(editField)($scope)}}),hotkeys.add({combo:"n",callback:function(){$scope.node.lastTask="insert",treeServices.push("<form ng-submit='newNode()'><input class='editNode' type='text' ng-model='inserted'></form>",$scope.node.current),$timeout(function(){angular.element(".editNode").focus()},1),$scope.init()}}),hotkeys.add({combo:"esc",allowIn:["INPUT"],callback:function(){"edit"==$scope.node.lastTask?treeServices.edit($scope.node.current,$scope.node.tempValue):"insert"==$scope.node.lastTask&&(treeServices["delete"](_.take($scope.node.current,$scope.node.current.length-1),$scope.node.current[$scope.node.current.length-1]),2==$scope.node.current.length?$scope.node.current=["nodeTop"]:$scope.node.current.splice(-2,2)),$scope.init(),this.edited=""}})}]),angular.module("treeSrvs",[]).constant("_",window._).run(function($rootScope){$rootScope._=window._}).service("treeServices",["$cookies","$log",function($cookies,$log){var tree={chart:{container:"#tree",rootOrientation:"NORTH",nodeAlign:"BOTTOM",node:{HTMLclass:"nodeBranches",collapsable:!0},connectors:{type:"step",style:{stroke:"#39496B","stroke-width":2.5}},animation:{nodeAnimation:"easeOutBounce",nodeSpeed:700,connectorsAnimation:"bounce",connectorsSpeed:700}},nodeStructure:{}},mind=this,config={initialized:!1,colOptions:["#F44336","#E91E63","#9C27B0","#673AB7","#3F51B5","#2196F3","#03A9F4","#00BCD4","#009688","#4CAF50","#8BC34A","#CDDC39","#FFEB3B","#FFC107","#FF9800","#FF5722","#795548","#9E9E9E","#607D8B"]};!function(){void 0===$cookies.get("mindTree")?($log.info("Welcome!!!"),$cookies.put("mindTree"),tree.nodeStructure={text:{name:"CEO"},HTMLid:"nodeTop",children:[]},config.initialized=!1):"string"==typeof $cookies.get("mindTree")&&$cookies.get("mindTree").length>1&&($log.info("Welcome Back!!!"),tree.nodeStructure=JSON.parse($cookies.get("mindTree")),config.initialized=!0)}(),this.updateCookies=function(){var now=new Date,exp=new Date(now.getFullYear()+1,now.getMonth(),now.getDate());$cookies.put("mindTree",JSON.stringify(tree.nodeStructure),{expires:exp})},this.init=function(topic){tree.nodeStructure.text.name=topic,config.initialized=!0,mind.updateCookies()},this.edit=function(target,value){var editAt=_.take(target,target.length);"nodeTop"==editAt[0]&&editAt.splice(0,1),editAt.push("text","name"),_.set(tree.nodeStructure,editAt,value),mind.updateCookies()},this.set=function(target,value){target.push("text","name"),_.set(tree.nodeStructure,target,value),target.splice(target.length-2,2,"innerHTML"),_.set(tree.nodeStructure,target,""),target.splice(target.length-1,1),mind.updateCookies()},this.push=function(form,insertAt){"nodeTop"==insertAt[0]?insertAt.splice(0,1,"children"):insertAt.push("children"),_.has(tree.nodeStructure,insertAt)||_.set(tree.nodeStructure,insertAt,[]);var pushTo=_.get(tree.nodeStructure,insertAt);insertAt.push(pushTo.length),pushTo.push({text:{name:""},innerHTML:form,connectors:{style:{stroke:config.colOptions[Math.floor(Math.random()*config.colOptions.length)]}},HTMLid:_.join(insertAt,"")}),mind.updateCookies()},this["delete"]=function(arr,idx){var deleteFrom=_.get(tree.nodeStructure,arr);deleteFrom.splice(idx,1),mind.updateCookies()},this.tree=function(){return tree},this.config=function(){return config.initialized}}]);